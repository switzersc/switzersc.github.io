---
layout: post
title: front-end or back-end? not that i'm biased or anything...
tags: ruby, programming, teaching, the iron yard
date: 2014-02-26 17:30UTC
---

<p>I recently had an email from someone I'll be <a href="http://theironyard.com/academy/rails-engineering/">teaching</a> at<a href="http://theironyard.com/locations/atlanta/"> The Iron Yard in Atlanta </a>who was interested in the difference between the Front-end Engineering course and the RubyOnRails course and which might be more suitable for him. He admitted he's more inclined towards UX<a href="#sdfootnote1sym" name="sdfootnote1anc"><sup>1</sup></a> and also plans to build his own applications from the ground-up. I was really stoked to talk about it because the decision between Rails and front-end is something that comes up a lot, especially with all the hot JS frameworks that help facilitate more completely javascript applications. Here's a slightly modified version of what I came up with and wrote back to him:</p>

<blockquote><p>I guess the first thing to talk about is something others have probably already stated -- that learning back-end will give you a more comprehensive understanding of development. Yes and yes. So much goes into web applications that the <a href="http://theironyard.com/academy/front-end-engineering/">front-end class</a> only covers briefly (in comparison) but that we will cover in detail -- databases,<sup><a href="#sdfootnote2sym" name="sdfootnote2anc">2</a> </sup>integrating with external APIs, client-server interaction, things like Amazon Web Services,<a href="#sdfootnote3sym" name="sdfootnote3anc"><sup>3</sup></a> etc. You'll have an extremely solid understanding of how to architect software and how to think about the relationships between data, which will be invaluable for you as you begin to design (referring to designing how it <em>works</em>, not how it <em>looks</em>) and build your own applications from scratch.</p>

<p>Furthermore, it's important to realize that the Ruby course is <em>not</em> only about back-end (just as it's important to know that the front-end course <i>does</i> cover some server-side, back-endy material). We will delve into how to make your Rails app look and feel good using swish CSS and Javascript, and we will go over the basics of some of the major javascript frameworks and libraries that you'll come into contact with. While different Javascript frameworks are certainly becoming more popular, many applications that use them still rely on a back-end Rails api.<a href="#sdfootnote4sym" name="sdfootnote4anc"><sup>4</sup></a></p>

<p>Also, you will never be limited in the class - if you complete your daily homework assignment early, dig deeper or try to add some ballin' javascript feature. <strong>Code is literally your playground</strong>, so have fun with it and feel encouraged to explore other code interests, as long as you're meeting the class's requirements. My only caveat is that you will have a lot on your plate with just Ruby and daily exercises, and we will encourage you to explore deeper into the day's topics for fuller understanding and mastery before you toy with entirely new or different material.</p>

<p>Probably the biggest aim of the course, though, or of any course at TIY, isn't to teach you just Ruby/Rails. It's to teach you how to think about code, about full-stack software engineering, about problem-solving. If eventually you decide to do a full-stack javascript application, you will be able to take what you learn from the class and apply it to any javascript framework with a high level of understanding of every piece of the application. At the end of the day, it's not about a certain language or framework you learn,<strong> it's about how you learn to think and what you learn to think about</strong>.</p>

<p>Also, specifically for those interested in being a tech entrepreneur, Rails is fantastic framework to start with because of the ridiculously rapid and scalable prototyping it allows you to do. After this course you'll be able to spin up an MVP for your company in a matter of days.<a href="#sdfootnote5sym" name="sdfootnote5anc"><sup>5</sup></a> <strong>The importance of this from a start-up's perspective is huge.</strong> Most of the time and money that goes into app development isn't making the end-product that the user or client will experience, it's making all the versions that they will never see. You may think you know what you want your app to be, but you won't truly know until you've tried a bunch of things you learn that you don't want or that don't work. That fact that you, as your start-up's CTO or lead dev, will be able to rapidly iterate through this long, painful learning process on a familiar, scalable, flexible framework, will save your start-up oodles of dough and frustration. You won't have to contract more and more hours out to backend developers to figure all this out along with you, or to change features constantly as you see what works and what doesn't. You will be able to do it all yourself, and then have a solid blueprint of logic to pass along to front-enders (or do the front-end yourself) to make purty, or to mobile devs to re-package into an iPhone app.</p>

<p>So should you do Ruby or Front-end?<a href="#sdfootnote7sym" name="sdfootnote7anc"><sup>7</sup></a> Both are great courses and share the ultimate aim of making you a solid, flexible programmer and a relentless problem solver, not just of making you a baller Rails dev or a Javascript beast. All the Iron Yard Front-end, Rails, and iOS instructors are absolutely amazing and will do you no wrong. Think about your aims, and what you want to be able to build or help others build by the end of the course. And also remember that these courses are just your first dunk into programming and that they won't limit what direction you take afterward. If you do think you're more designer-minded or you really care about UI, or you just like making things move and sparkle,<a href="#sdfootnote8sym" name="sdfootnote8anc"><sup>8</sup></a> then <i>maybe</i> front-end is your thing to start with. If you're more entrepreneurially minded or getting down-and-dirty with data sounds at least somewhat mysterious and intriguing, maybe your intro to the world of software should be Ruby.<a href="#sdfootnote9sym" name="sdfootnote9anc"><sup>9</sup></a></p></blockquote>

&nbsp;
<div id="sdfootnote1">

<a href="#sdfootnote1anc" name="sdfootnote1sym">1</a> Although I thought I was not inclined towards anything computery at all until I gave it a shot and turned into a code addict.

</div>
<div id="sdfootnote2">

<a href="#sdfootnote2anc" name="sdfootnote2sym">2</a> Which are my guilty pleasure.

</div>
<div id="sdfootnote3">

<a href="#sdfootnote3anc" name="sdfootnote3sym">3</a> It's one of my goals to at least touch on AWS basics because so many apps and companies use it, but I recognize the depth of our coverage on this topic will really be determined by time and interest.

</div>
<div id="sdfootnote4">

<a href="#sdfootnote4anc" name="sdfootnote4sym">4</a> Why? Because Rails is baller. If you don't believe any of what I'm saying here, just google "why is rails so popular" and learn, young grasshopper. Obviously, every language or framework has strengths and limitations -- and we will certainly discuss those in the class-- but Rails is quite often a good choice for web apps.

</div>
<div id="sdfootnote5">

<a href="#sdfootnote5anc" name="sdfootnote5sym">5</a> Unless it's just a massive piece of software. Or you and your cofounders have a falling out. Or your test-users hate your product. Or you're inundated with freelance work that keeps you from spending any time on your own app. Or you get distracted by gifs of cats.<a href="#sdfootnote6sym" name="sdfootnote6anc"><sup>6</sup></a>

</div>
<div id="sdfootnote6">

<a href="#sdfootnote6anc" name="sdfootnote6sym">6</a> <i>Not</i> speaking from experience, obviously. Ahem.

</div>
<div id="sdfootnote7">

<a href="#sdfootnote7anc" name="sdfootnote7sym">7</a> Ruby, obviously.

</div>
<div id="sdfootnote8">

<a href="#sdfootnote8anc" name="sdfootnote8sym">8</a> Which are all things you can still do with a RubyOnRails application, mind you. And I don't mean that to downplay the value of front-enders or their interests at all, or make the focus of the front-end class seem superficial, because it's definitely not. You can build amazing client-side apps in the front-end course, they just carry a different weight and have different uses.

</div>
<div id="sdfootnote9">

<a href="#sdfootnote9anc" name="sdfootnote9sym">9</a> Except your intro should definitely always be Ruby.<a href="#sdfootnote10sym" name="sdfootnote10anc"><sup>
</sup></a>

</div>