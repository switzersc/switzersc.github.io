---
title: preparing for ruby
tags: ruby, programming, teaching, the iron yard
date: 2014-03-06 17:30UTC
---

<p>I've been getting some emails from students asking how they can prepare for <a href="http://theironyard.com/academy/rails-engineering/" target="_blank">my Ruby class</a> starting in three weeks (<em>three weeks?!</em>), and it's definitely time to start talking about pre-work. It's an interesting topic because yes, it'd be ideal if every student came into the class with a strong foundation, but on the other hand, what pre-work will provide a solid preparation without being way over newbies' heads and without giving them the wrong ideas about the “right” ways to do things?</p>

<p>What I hear from beginners (and what I know from experience) is that after going through the Ruby track at Codecademy or dabbling in paid online courses like Treehouse, they still don't know how to pull it all together or take that knowledge and apply it confidently or competently to their own real-life projects. Sure, you can sum arrays of integers and extract! from hashes, but do you really internalize what a class is and can you explain how it interfaces with other classes? You can play copycat with the videos and type tests and see the green stars line up in the terminal, but do you really understand what you're doing or why you're doing it? I know I didn't. (And really, those little green stars don't give you that <em>satisfaction</em> until you understand how they were transformed from the red F's – and can transform them yourself without a screencast.)</p>

<p>But that doesn't mean those online courses aren't good prep for my class. The whole point of <a href="http://theironyard.com" target="_blank">The Iron Yard</a> course is to teach you the things you can't learn yourself online and to help you pull all of those bits of code knowledge together into a deep, thorough understanding. So dig into some of these resources, and enter my classroom on March 31st with as many tools in your toolbox as you can – and I'll teach you how to use them and how to think about them.</p>

<p><strong><em>Note: Do NOT install anything on the computer you'll be using in class yet. Only read and research.</em></strong></p>

<p>Ruby/Rails:</p>
<ul>
	<li><span style="color: #800080;"><strong><a href="http://www.codecademy.com/tracks/ruby" target="_blank"><span style="color: #800080;">Ruby Track on Codecademy</span></a></strong></span>: Get the basics so you're not always looking up terms and methods.</li>
	<li><span style="color: #800080;"><strong><a href="http://ruby.railstutorial.org/" target="_blank"><span style="color: #800080;">Hartl's Rails Tutorial</span></a></strong></span>: Probably the best online guide to Rails, and something good to start reading, but don't try to memorize it all by heart or worry about understanding absolutely everything.</li>
	<li><strong>The Docs &amp; Guides (<span style="color: #800080;"><a href="http://guides.rubyonrails.org/" target="_blank"><span style="color: #800080;">Rails</span></a></span> / <span style="color: #800080;"><a href="http://ruby-doc.org/" target="_blank"><span style="color: #800080;">Ruby</span></a></span>)</strong>: I don't expect you to understand everything (or even most of what) you read here, but it's important that you start getting used to looking at code documentation. I'm also a firm believer in learning anything the same way you'd learn a new language – by immersion. Even if you don't understand most of the words, just being exposed to them and starting to place them in contexts will help you become fluent faster. PS – start with the Rails guides.</li>
</ul>

<p>Programmers' Tools:</p>
<ul>
	<li><span style="color: #800080;"><strong><a href="http://cli.learncodethehardway.org/book/" target="_blank"><span style="color: #800080;">Command Line</span></a></strong></span>: Mastery of command line basics is essential for any developer (and extremely useful for non-devs) and will make your life much easier.</li>
	<li><span style="color: #800080;"><strong><a href="http://git-scm.com/book/en/Getting-Started-About-Version-Control" target="_blank"><span style="color: #800080;">Git</span></a></strong></span>: Git and version control are central to how we will be working on projects. This may be a bit much to fully wrap your head around before class, but it's worth a read to start getting familiar with the terms and concepts.</li>
</ul>

<p>Keep in mind that even if every student goes through all of these resources, everyone will still enter the class at different levels. If you feel like you “know everything” about a certain topic we're covering in class on a given day, rest assured that you don't. Even with the most “basic” coding principles or techniques, you'll never know everything, and there will be so much about that topic – possibilities, limitations, applications, testing techniques – that you can explore while others are still working out the fundamentals. My goal is that no one gets left behind and at the same time that no one gets bored.</p>

<p><strong>My biggest tip:</strong> Immerse yourself in coding language (exercises, articles/sites about code, podcasts) to just start picking up the lingo and broadening your awareness of concepts.</p>

<p><strong>But that leads me to my biggest warning: Don't get attached to any "right" way of doing or thinking about code. Just because you listen to a podcast where some well-known Rubyist argues for separating code out into mix-ins, for example, doesn't mean that's the best way to do things for every project. The biggest thing I need all my students to have is a sponge for a mind: soak as much as possible in, but be able to let it all out.</strong></p>